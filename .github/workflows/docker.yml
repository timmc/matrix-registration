name: Publish Docker Image
on: [ push, pull_request ]

jobs:
  build_image:
    name: Build Docker Image
    runs-on: ubuntu-latest

    outputs:
      tag: ${{ steps.vars.outputs.tag }}

    strategy:
      matrix:
        arch_name: [ 'x64', 'arm64', 'arm32' ]
        include:
        - arch: 'import <nixpkgs> {}'
          arch_name: 'x64'
        - arch: 'import <nixpkgs> { crossSystem.config = "aarch64-unknown-linux-musl"; }'
          arch_name: 'arm64'
        - arch: 'import <nixpkgs> { crossSystem.config = "armv7l-unknown-linux-musl"; }'
          arch_name: 'arm32'
    steps:
      - name: Check out the repo
        uses: actions/checkout@v2
      - name: Get the version
        id: vars
        run: |
          tag="${GITHUB_REF:10}"
          if [[ "${tag}" == v* ]]; then
            echo ::set-output name=tag::$(echo "${tag}")
          else
            echo ::set-output name=tag::latest
          fi

      - name: Install nix
        uses: cachix/install-nix-action@v12
        with:
          nix_path: nixpkgs=channel:nixos-22.11
      - name: Build docker image
        env:
          tag: ${{ steps.vars.outputs.tag }}
        run: nix-build docker.nix --arg pkgs '${{ matrix.arch }}' --argstr tag "${tag}-${arch_name}"

      - name: Rename archive 
        run: mv result image_${{ matrix.arch_name }}.tar.gz
      - uses: actions/upload-artifact@master
        with:
          name: image_${{ matrix.arch_name }}
          path: image_${{ matrix.arch_name }}.tar.gz

  test_image:
    name: Test Docker Image
    runs-on: ubuntu-latest
    needs: build_image

    services:
      postgres:
        image: postgres
        env:
          POSTGRES_PASSWORD: postgres
        options:
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
      - name: Check out the repo
        uses: actions/checkout@v2
      - uses: actions/download-artifact@master
        with:
          name: image_x64

      - name: Run synapse
        run: |
          docker run -d \
            -e UID=$(id -u) \
            -e GID=$(id -g) \
            --volume="$(pwd)/tests:/data" \
            --network="${{ job.services.postgres.network }}" \
            --name="synapse" \
            matrixdotorg/synapse:latest

      - name: Load docker image
        run: docker load < image_x64.tar.gz
      - name: Run docker image
        id: token
        env:
          tag: ${{ needs.build_image.outputs.tag }}
        run: |
          echo "test alembic"
          docker run --rm \
            --volume="$(pwd)/tests:/data" \
            --network="${{ job.services.postgres.network }}" \
            matrix-registration:$tag \
            alembic upgrade head
          echo "create a token"
          docker run --rm \
            --volume="$(pwd)/tests:/data" \
            --network="${{ job.services.postgres.network }}" \
            matrix-registration:$tag \
            matrix-registration generate 1> token
          echo "serve webpage"
          docker run -d \
            --volume="$(pwd)/tests:/data" \
            --network="${{ job.services.postgres.network }}" \
            --publish 5000:5000 \
            --name="matrix-registration" \
            matrix-registration:$tag

          echo ::set-output name=token::$(cat token)

      - name: Register test account
        run: |
          echo "waiting until matrix-registration is up..."
          for run in {1..5}; do
            healthy=$(docker inspect -f "{{.State.Health.Status}}" matrix-registration)
            echo $healthy
            if [ "$healthy" = "healthy" ]; then
              echo "matrix-registration is up!"
              break
            else
              sleep 1
            fi
          done
          echo "waiting until synapse is up..."
          for run in {1..60}; do
            healthy=$(docker inspect -f "{{.State.Health.Status}}" synapse)
            echo $healthy
            if [ "$healthy" = "healthy" ]; then
              echo "synapse is up!"
              break
            else
              sleep 1
            fi
          done
          # register account
          curl -fSs \
            -F 'username=test' \
            -F 'password=verysecure' \
            -F 'confirm=verysecure' \
            -F 'token=${{ steps.token.outputs.token }}' \
            http://matrix-registration:5000/register
 
      - name: Registering failed, check logs
        if: ${{ failure() }}
        run: |
          cat tests/mreg.log
          docker logs synapse

      - name: Stop manually started containers
        if: ${{ always() }}
        run: docker kill $(docker ps -q)

  push_to_registries:
    name: Push Docker Image to Multiple Registries
    runs-on: ubuntu-latest
    needs: test_image
    if: startsWith(github.ref, 'refs/tags/v')

    strategy:
      matrix:
        hub: [Github, Docker]
        include:
          - hub: Github
            registry: ghcr.io
            username: DOCKER_USERNAME
            password: GITHUB_TOKEN
            image: "/matrix-registration-image"
          - hub: Docker
            registry: docker.io
            username: DOCKER_USERNAME
            password: DOCKER_PASSWORD
            image: ""

    steps:
      - uses: actions/download-artifact@master
        with:
          name: image

      # ${GITHUB_REPOSITORY,,} => zeratax/matrix-registration
      - name: Push to ${{ matrix.hub }} 
        run: |
          echo "login to registry..."
          docker login --username="${{secrets[matrix.username]}}" --password="${{secrets[matrix.password]}}" ${{ matrix.registry }}

          echo "logged in!"

          arches=(x64 amd64 amd32)
          image_names=()

          echo "uploading images for individual arches..."
          for arch in $arches
          do
            image="image_${arch}.tar.gz"

            echo "check if image '${image}' for arch ${arch} exists..."
            if [ ! -f "${image}" ]; then
              break
            fi

            echo "image exists!"

            full_tag="${tag}-${arch}"
            name="${GITHUB_REPOSITORY,,}${{matrix.image}}"

            echo "upload image for arch ${arch}..."
            docker load -i $image
            docker push ${name}:${full_tag}

            image_names=+("${name}:${full_tag}")
            echo "so far uploaded images: '${#image_names[@]}'"
          done

          if [ ${#image_names[@]} -eq 0 ]; then
            echo "no images uploaded!"
            return 1
          fi

          echo "creating a manifest to associate arch images with multi-arch image..."
          docker manifest create --amend ${name}:${tag} ${image_names[@]}
          echo "uploading manifest..."
          docker manifest push ${name}:${tag}
          echo "success!"
        env:
          tag: ${{ needs.build_image.outputs.tag }}
